<?php
$lines = file('123.doc'); //Читаем файл построчно

$test_arr = array();
foreach ($lines as $line) { //Разбираем полученный массив строк
    if ($line != '' || $line != ' ') {
        $str = getStrSplit($line); //Делим каждую строку надвое и помещаем в массив
        $test_arr[] = getHashStr($str); //Получаем хэш для каждой строки и помещаем в масив
    }
    echo getHashStr($str) . "(" . strlen(getHashStr($str)) . ")" . '<br>'; //Выводим хэш строки и в скобках ее длинну для проверки
}
//$dif_ar = array_unique($test_arr, SORT_STRING); //Оставляем в массиве только уникальные хэшти и считаем их колличество для проверки уникальности полученных хэшей строк
//echo '<pre>'; print_r(count($dif_ar));

function getStrSplit($str)
{
    $str_l = strlen($str); //Получаем длину строки
    if ($str_l > 1) { //Если длина больше одного символа, то делим длину на двое и делим строку надвое
        $str_l_round = ceil($str_l/2);
        $str = str_split($str, $str_l_round);
    } else { //Если длина строки один символ, то помещаем ее всеравно в массив
        $str_arr = array();
        $str_arr[] = $str;
        $str = $str_arr;
    }
    return $str;
}

function getHash($s)
{
    $str_32b = hash("crc32b", $s); //Берем хэш каждой части строки согласно алгоритму crc32b - который отдает 16-ричную строку длиной 8 символов.
    $str_format = gmp_strval(gmp_init($str_32b, 16), 62); //Переводим каждую части из 16-ричной
                                                        //системы в 62-ричну которая использует симолы a-Z и
                                                        //цифры 0-9 согласно библиотеки GMP PHP(требует дополнительную установку), но длина строки конечно варьируется от 10 до 14 символов
                                                        //и для получения 16 символов приходится добивать строку нулми в функции getHashStr
    //$str_format = hash("crc32b", $s); //Можно использовать хэш
                                    //без перевода в 62-ричную систему, оставив строку
                                    //составленную из двух хэшей по 8 символов 16-ричной системы,
                                    //но тогда буду использоваться только цифры 0-9 и сиволы a,b,c,d,e,f - согласно представлению 16-ричной системы
    return $str_format; //Возвращаем конечную строку
}

function getHashStr($str)
{
    $str_hash_array = array();
    foreach ($str as $s) {
        $str_hash_array[] = getHash($s); //Получаем хэши для строк(двух элементов массива - который хранит разделенную строку попалам в фуекции getStrSplit)
    }
    if (!isset($str_hash_array[1])) {
        $str_hash_array[1] = getHash($str_hash_array[0]); //Если нет второй части строки(пример - один сивмовл) - то делаем еще раз хэш первого элемента строки и кладем его вторым элементом
    }
    if ($str_hash_array[0] === $str_hash_array[1]) {
        $str_hash_array[1] = getHash(getHash($str_hash_array[0])); //Если к примеру всего два символа и они одинаковые тождественно - то берем два раза хэш элемента, чтобынебыло коллизии в дальнейшем
    }
    $str_out = implode('', $str_hash_array); //Делаем строку из массива - 16 символов
    if (strlen($str_out) < 16) { //Если строка меньше 16 символов, то дополнем нулями, тут есть над чем подумать еще
        $count_zero = '';
        $str_out_zero = 16 - strlen($str_out);
        $str_out = $str_out . sprintf("%0".$str_out_zero."d", $a);
    }
    return $str_out;
}
?>
